#!/usr/bin/env python

class MorseCoder(object):

    code = {
        'A' : '.-',     'B' : '-...',      'C' : '-.-.',      'D' : '-..',
        'E' : '.',      'F' : '..-.',      'G' : '--.',       'H' : '....',
        'I' : '..',     'J' : '.---',      'K' : '-.-',       'L' : '.-..',
        'M' : '--',     'N' : '-.',        'O' : '---',       'P' : '.--.',
        'Q' : '--.-',   'R' : '.-.',       'S' : '...',       'T' : '-',
        'U' : '..-',    'V' : '...-',      'W' : '.--',       'Y' : '-..-',
        'X' : '-.--',   'Z' : '--..',      '1' : '.----',     '2' : '..---',
        '3' : '...--',  '4' : '....-',     '5' : '.....',     '6' : '-....',
        '7' : '--...',  '8' : '---..',     '9' : '----.',     '0' : '-----',
        ' ' : '  '
    }

    def __init__(self, decode=False):
        '''
        Class constructor: make dictionary a two way lookup hash for decoding
                           choose the cipher direction
        '''
        if decode:
            self.code.update(dict(zip(self.code.values(), self.code.keys())))
            self.cipher = self.decode
        else:
            self.cipher = self.encode

        return

    def encode(self, message):
        '''
        Convert alphanumeric message to morse code
        '''
        try:
            return ' '.join([self.code[char] for char in message.upper()])
        except KeyError:
            return ' '.join([self.code[char] for char in self.clean(message.upper())])

    def decode(self, message):
        '''
        Convert morse code to alphanumeric message
        '''
        secret = str()
        for word in message.split('   '):
            for char in word.split():
                secret += self.code[char]
            secret += ' '
        return secret

    def clean(self, message):
        '''
        Strip any non-alphanumeric characters
        '''
        dirty = re.compile('[\W_]+')
        return dirty.sub('', message)


def main(args, help):

    morse = MorseCoder(args.decode)

    if not (select.select([sys.stdin,],[],[],0.0)[0] or args.files):
        help()
        return

    if args.output and args.output != '-':
        sys.stdout = open(args.output, 'w')

    try:
        for line in fileinput.input(args.files, args.inplace):
            print morse.cipher(line.strip())

    except IOError:
        sys.stderr.write("%s: No such file %s\n" % (os.path.basename(__file__), fileinput.filename()))

    return

if __name__ == "__main__":
    import re, os, sys, select, argparse, fileinput
    parser = argparse.ArgumentParser()
    parser = argparse.ArgumentParser(formatter_class=lambda prog: argparse.HelpFormatter(prog,max_help_position=30),
                                     description="Convert text to morse code.")
    parser.add_argument('files', nargs='*', help='input files')
    encoding = parser.add_mutually_exclusive_group()
    encoding.add_argument("-e", "--encode", action="store_true",
                       default=True, help="encode text to morse code (default)")
    encoding.add_argument("-d", "--decode", action="store_true",
                       default=False, help="decode morse code to text")
    output = parser.add_mutually_exclusive_group()
    output.add_argument("-i", "--inplace", action="store_true",
                        default=False, help="store the results back to the input file")
    output.add_argument('-o', '--output', help='output file (default is stdout)')
    main(parser.parse_args(), parser.print_help)
